"use strict";(self["webpackChunkreservation_frontend"]=self["webpackChunkreservation_frontend"]||[]).push([[819],{819:function(e,o,t){t.r(o),t.d(o,{default:function(){return O}});var l=t(641);const a=(0,l.Lk)("h1",null,"Welcome to eHomeAffairs - eBooking",-1),s=(0,l.Lk)("h3",{class:"mainBrwnTxt"},"Below are the slots available for booking",-1),n={class:"row"};function i(e,o,t,i,r,d){const c=(0,l.g2)("BookingsModal");return(0,l.uX)(),(0,l.CE)("div",null,[(0,l.Lk)("div",null,[a,s,(0,l.Lk)("div",n,[((0,l.uX)(!0),(0,l.CE)(l.FK,null,(0,l.pI)(this.theSlotsArray,(e=>((0,l.uX)(),(0,l.CE)("div",{class:"col-4 col-md-2 testBorder d-flex justify-content-evenly mx-sm-auto",key:e.slotID},[(0,l.bF)(c,{theSlot:e},null,8,["theSlot"])])))),128))])])])}var r=t(33),d=t(751);const c=["data-bs-target"],u=["id","aria-labelledby"],h={class:"modal-dialog modal-dialog-centered"},g={class:"modal-content veryWhitenedBrownBg"},m={class:"modal-header"},y=["id"],k=(0,l.Lk)("button",{type:"button",class:"btn-close mt-5","data-bs-dismiss":"modal","aria-label":"Close"},null,-1),b={class:"modal-body"},w={class:"mainBrownBg_modal"},v=(0,l.Lk)("div",{class:"mainBrwnBg topHeight"},null,-1),p={class:"veryWhitenedBrownBg_modal"},B={class:"row"},L={class:"col-6"},f=(0,l.Lk)("p",{class:"mt-3"},"ID number",-1),D={class:"col-6"},S=(0,l.Lk)("p",{class:"mt-3"},"Language",-1),N=(0,l.Lk)("p",{class:"mt-3"},"Choose the time",-1),x=(0,l.Lk)("p",{class:"mt-3"},"Choose the Service",-1),A={class:"modal-footer"},C=(0,l.Lk)("button",{type:"button",class:"btn btn-secondary","data-bs-dismiss":"modal"},"Close",-1);function M(e,o,t,a,s,n){return(0,l.uX)(),(0,l.CE)("div",null,[(0,l.Lk)("button",{onClick:o[0]||(o[0]=e=>n.findDayName()),type:"button",class:"singleSlot","data-bs-toggle":"modal","data-bs-target":"#staticBackdrop"+t.theSlot.slotDay},(0,r.v_)(t.theSlot.slotDay),9,c),(0,l.Lk)("div",{class:"modal fade",id:"staticBackdrop"+t.theSlot.slotDay,"data-bs-backdrop":"static","data-bs-keyboard":"false",tabindex:"-1","aria-labelledby":"staticBackdropLabel"+t.theSlot.slotDay,"aria-hidden":"true"},[(0,l.Lk)("div",h,[(0,l.Lk)("div",g,[(0,l.Lk)("div",m,[(0,l.Lk)("h5",{class:"modal-title",id:"staticBackdropLabel"+t.theSlot.slotDay},"You have chosen to come in on: "+(0,r.v_)(this.dayName)+", "+(0,r.v_)(t.theSlot.slotDay)+" "+(0,r.v_)(this.monthName)+" 2024",9,y),k]),(0,l.Lk)("div",b,[(0,l.Lk)("div",w,[v,(0,l.Lk)("div",p,[(0,l.Lk)("div",B,[(0,l.Lk)("div",L,[f,(0,l.bo)((0,l.Lk)("input",{type:"text","onUpdate:modelValue":o[1]||(o[1]=e=>s.newBooking.userID=e)},null,512),[[d.Jo,s.newBooking.userID]])]),(0,l.Lk)("div",D,[S,(0,l.bo)((0,l.Lk)("input",{type:"text","onUpdate:modelValue":o[2]||(o[2]=e=>s.newBooking.userLanguage=e)},null,512),[[d.Jo,s.newBooking.userLanguage]])])]),N,(0,l.bo)((0,l.Lk)("input",{type:"text","onUpdate:modelValue":o[3]||(o[3]=e=>s.newBooking.userTime=e)},null,512),[[d.Jo,s.newBooking.userTime]]),x,(0,l.bo)((0,l.Lk)("input",{type:"text","onUpdate:modelValue":o[4]||(o[4]=e=>s.newBooking.userService=e)},null,512),[[d.Jo,s.newBooking.userService]])])])]),(0,l.Lk)("div",A,[C,(0,l.Lk)("button",{type:"button",class:"btn",onClick:o[5]||(o[5]=(...e)=>n.addABooking&&n.addABooking(...e))},"Create booking")])])])],8,u)])}var T={name:"BookingsModal",props:{theSlot:Object},data(){return{dayName:"",monthName:"",weekDays:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],newBooking:{userID:null,userLanguage:null,userTime:null,userService:null}}},methods:{async findDayName(){let e=new Date(`2024, '${this.theSlot.slotMonth}, ${this.theSlot.slotDay}'`);console.log("below is the full date"),console.log(e);let o=e.getDay();console.log("below is the day"),console.log(this.weekDays[o]),this.dayName=this.weekDays[o],console.log("below is the this.dayName variable"),console.log(this.dayName);let t=e.getMonth();console.log("Below is the monthNum"),console.log(t);let l=this.monthNames[t];console.log("Below is the monthName"),console.log(l),this.monthName=l},async addABooking(){let e=this.newBooking;try{await this.$store.dispatch("addBooking",e),alert(`You have successfully created the following booking: userID = ${e.userID}, userLanguage = ${e.userLanguage}, userTime = ${e.userTime}, userService: ${e.userService}. Please proceed to the user profile in order to check, edit or delete your booking.`),location.reload()}catch(o){console.log(`the following error was found in the bookings modal when trying to add a new booking: ${o}`)}}}},$=t(262);const J=(0,$.A)(T,[["render",M]]);var F=J,I={data(){return{theSlotsArray:[],monthNum:"",dayNum:"",weekDays:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"]}},components:{BookingsModal:F},methods:{async getAllSlots(){try{let e=await this.$store.dispatch("getSlots");console.log("below is the slots array returned fr the getSlots axios in the dateFxs pg"),console.log(e),this.theSlotsArray=e}catch(e){console.log(`The following error occured on the mounted of the DateFxsBooking view when trying to get the slots: ${e}`)}},getNewDate(){console.log("The getNewDate fx is running below");let e=`'2024, ${this.monthNum}, ${this.dayNum}'`;console.log("The info for the new date is below"),console.log(e);let o=new Date(e);console.log("Below is the actual new date"),console.log(o);let t=o.getDay();console.log("below is the day of the above date:"),console.log(this.weekDays[t]);let l=o.getMonth();console.log("below is the month of the new date"),console.log(this.monthNames[l]);let a=this.monthNames[l];console.log("Below, we'll be trying the indexOf() method");let s=this.weekDays.indexOf(a);console.log("below is the indexOf the currentMonth"),console.log(s)}},mounted(){this.getAllSlots()}};const _=(0,$.A)(I,[["render",i]]);var O=_}}]);
//# sourceMappingURL=819.8120f3a7.js.map